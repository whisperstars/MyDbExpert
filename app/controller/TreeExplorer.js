Ext.define('MDBE.controller.TreeExplorer', {    extend: 'Ext.app.Controller',	views: [        'MDBE.view.TreeExplorer'    ],		requires: ['MDBE.util.Utils'],		stores: [		'TreeExplorer',		'Hosts',		'Databases'	],		    init: function() {        this.control({			'treeexplorer': {				render: this.onTreeExplorerRender,				select: this.onSelect,				beforeitemexpand: this.onBeforeTreeExplorerItemExpand,				itemcontextmenu: this.onItemContextMenu			}        });    },    	onTreeExplorerRender: function(treePanel) {		var rootNode = treePanel.getRootNode();		rootNode.appendChild({			//id: '0,localhost:3306[localhost:3306]',			id: "h1",			text: 'localhost:3306',			iconCls: 'server_database',			expanded: false,			loaded: false,			qtip: 'Host: ' + 'localhost' + ', Port:' + '3306'		});    },		onSelect: function(view, record, e){		var propertyGrid = Ext.getCmp('ObjectProperty');		switch (record.data.depth) {			case 1: //Connection				propertyGrid.setSource({					"(name)": record.data.text,					"connected": true,					"user": 'root'				});				break;			case 2: //Database				propertyGrid.setSource({					"(name)": record.data.text,					"Charset": 'utf8',					"Collation": 'utf8_general_ci'				});				break;		}	},		onBeforeTreeExplorerItemExpand: function(node, e) {		var databases;		switch(node.data.depth) {			case 1:				databases = this.getStore('Databases');				MDBE.util.Utils.loadStory(databases, {						"request": Ext.JSON.encode({					        "uri": "db/show",					        "method": "GET",					        "auth":{					            "login": "root",					            "pass": "1",					            "host": "localhost"					        },					        "data": {}					    })					}, this.callback, this);				break;		}		//MDBE.util.Utils.expandTreeExplorerNode(node);	},	callback: function(records, operation) {			},		onItemContextMenu: function( view, rec, node, index, e ){		e.stopEvent();		node.focus();				var connStoreData = MDBE.util.Utils.getConnectionFromNode(rec);		Ext.ComponentQuery.query('#mmCloseConnection')[0].setDisabled(!connStoreData.connected);		Ext.ComponentQuery.query('#mmOpenConnection')[0].setDisabled(connStoreData.connected);		Ext.ComponentQuery.query('#mmChangeConnection')[0].setDisabled(connStoreData.connected);		var vw = view.panel;				switch (rec.data.depth) {			case 1: //Connection				vw.connectionContextMenu.showAt([e.getX(), e.getY()]);				break;			case 2: //Database				vw.databaseContextMenu.showAt([e.getX(), e.getY()]);				break;			case 3: //DatabaseObjectType                var str = rec.data.text;				var txt = str.substring(0, str.indexOf('(')).trim();				switch (txt) {					case 'Tables':						vw.tablefolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Views':						vw.viewfolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Procedures':						vw.procedurefolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Functions':						vw.functionfolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Triggers':						vw.triggerfolderContextMenu.showAt([e.getX(), e.getY()]);						break;				}				break;            case 4:                var str = rec.parentNode.data.text;				var txt = str.substring(0, str.indexOf('(')).trim();                switch (txt){                    case 'Tables':						vw.tableContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Views':						//vw.viewfolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Procedures':						//vw.procedurefolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Functions':						//vw.functionfolderContextMenu.showAt([e.getX(), e.getY()]);						break;					case 'Triggers':						//vw.triggerfolderContextMenu.showAt([e.getX(), e.getY()]);						break;                }                break;		};		/*		if (rec.data.id.substr(0,1) === '0'){					};		if (rec.data.id.substr(0,1) === '1'){			vw.databaseContextMenu.showAt([e.getX(), e.getY()]);		};		*/				//var arr = rec.internalId.split(',');		return false;		}});